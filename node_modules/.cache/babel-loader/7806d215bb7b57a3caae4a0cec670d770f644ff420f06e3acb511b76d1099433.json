{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nexport default {\n  props: [\"cart\"],\n  data() {\n    return {\n      name: \"\",\n      phone: \"\",\n      checkoutMessage: \"\"\n    };\n  },\n  methods: {\n    checkout() {\n      // Group items by lessonId and sum their quantities\n      const groupedItems = [];\n      const itemMap = new Map();\n      this.cart.forEach(lesson => {\n        if (itemMap.has(lesson._id)) {\n          // Increment quantity if lesson already exists\n          itemMap.get(lesson._id).quantity += lesson.quantity || 1;\n        } else {\n          // Add new entry to the map\n          itemMap.set(lesson._id, {\n            lessonId: lesson._id,\n            subject: lesson.subject,\n            quantity: lesson.quantity || 1\n          });\n        }\n      });\n\n      // Convert the map back to an array\n      itemMap.forEach(value => groupedItems.push(value));\n\n      // Prepare the order\n      const order = {\n        name: this.name,\n        phone: this.phone,\n        items: groupedItems\n      };\n\n      // Send the order to the server\n      fetch(\"http://localhost:3000/orders\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(order)\n      }).then(() => {\n        this.checkoutMessage = \"Order placed successfully!\";\n        this.$emit(\"clear-cart\"); // Emit event to clear the cart\n      }).catch(error => {\n        console.error(\"Checkout error:\", error);\n        this.checkoutMessage = \"Error placing the order. Please try again.\";\n      });\n    },\n    removeFromCart(item) {\n      this.$emit(\"update-cart\", item); // Emit event to parent\n    }\n  },\n  computed: {\n    isCheckoutValid() {\n      const nameValid = /^[A-Za-z\\s]+$/.test(this.name);\n      const phoneValid = /^[0-9]+$/.test(this.phone);\n      return nameValid && phoneValid && this.cart.length > 0;\n    }\n  }\n};","map":{"version":3,"names":["props","data","name","phone","checkoutMessage","methods","checkout","groupedItems","itemMap","Map","cart","forEach","lesson","has","_id","get","quantity","set","lessonId","subject","value","push","order","items","fetch","method","headers","body","JSON","stringify","then","$emit","catch","error","console","removeFromCart","item","computed","isCheckoutValid","nameValid","test","phoneValid","length"],"sources":["/Users/lyphilong/Desktop/FullStack/project/src/components/ShoppingCart.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    \n    <div>\n      <h2 class=\"mt-5\">Shopping Cart</h2>\n      <ul class=\"list-group mb-4\">\n        <li v-for=\"item in cart\" :key=\"item._id\" class=\"list-group-item\">\n          <i class=\"fas fa-chalkboard-teacher\"></i> \n          {{ item.subject }} - ${{ item.price }} ({{ item.location }})\n          <button class=\"btn btn-danger btn-sm float-right\" @click=\"removeFromCart(item)\">Remove</button>\n        </li>\n      </ul>\n      <p v-if=\"cart.length === 0\" class=\"text-muted\">Your cart is empty.</p>\n\n    </div>\n\n    <h3>Checkout</h3>\n      <div v-if=\"cart.length > 0\">\n        <div class=\"form-group\">\n          <label for=\"name\">Name</label>\n          <input type=\"text\" id=\"name\" class=\"form-control\" v-model=\"name\" placeholder=\"Enter your name\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"phone\">Phone</label>\n          <input type=\"text\" id=\"phone\" class=\"form-control\" v-model=\"phone\" placeholder=\"Enter your phone number\">\n        </div>\n        <button class=\"btn btn-success\"  @click=\"checkout\">Submit Order</button>\n        <p v-if=\"checkoutMessage\" class=\"alert alert-info mt-3\">{{ checkoutMessage }}</p>\n      </div>\n      </div>\n  </template>\n  \n  <script>\nexport default {\n  props: [\"cart\"],\n  data() {\n    return {\n      name: \"\",\n      phone: \"\",\n      checkoutMessage: \"\",\n    };\n  },\n  methods: {\n    checkout() {\n      // Group items by lessonId and sum their quantities\n      const groupedItems = [];\n      const itemMap = new Map();\n\n      this.cart.forEach((lesson) => {\n        if (itemMap.has(lesson._id)) {\n          // Increment quantity if lesson already exists\n          itemMap.get(lesson._id).quantity += lesson.quantity || 1;\n        } else {\n          // Add new entry to the map\n          itemMap.set(lesson._id, {\n            lessonId: lesson._id,\n            subject: lesson.subject,\n            quantity: lesson.quantity || 1,\n          });\n        }\n      });\n\n      // Convert the map back to an array\n      itemMap.forEach((value) => groupedItems.push(value));\n\n      // Prepare the order\n      const order = {\n        name: this.name,\n        phone: this.phone,\n        items: groupedItems,\n      };\n\n      // Send the order to the server\n      fetch(\"http://localhost:3000/orders\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(order),\n      })\n        .then(() => {\n          this.checkoutMessage = \"Order placed successfully!\";\n          this.$emit(\"clear-cart\"); // Emit event to clear the cart\n        })\n        .catch((error) => {\n          console.error(\"Checkout error:\", error);\n          this.checkoutMessage = \"Error placing the order. Please try again.\";\n        });\n    },\n    removeFromCart(item) {\n      this.$emit(\"update-cart\", item); // Emit event to parent\n    },\n  },\n  computed: {\n    isCheckoutValid() {\n      const nameValid = /^[A-Za-z\\s]+$/.test(this.name);\n      const phoneValid = /^[0-9]+$/.test(this.phone);\n      return nameValid && phoneValid && this.cart.length > 0;\n    },\n  },\n};\n</script>\n\n  "],"mappings":";;;AAiCA,eAAe;EACbA,KAAK,EAAE,CAAC,MAAM,CAAC;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAAA,EAAG;MACT;MACA,MAAMC,YAAW,GAAI,EAAE;MACvB,MAAMC,OAAM,GAAI,IAAIC,GAAG,CAAC,CAAC;MAEzB,IAAI,CAACC,IAAI,CAACC,OAAO,CAAEC,MAAM,IAAK;QAC5B,IAAIJ,OAAO,CAACK,GAAG,CAACD,MAAM,CAACE,GAAG,CAAC,EAAE;UAC3B;UACAN,OAAO,CAACO,GAAG,CAACH,MAAM,CAACE,GAAG,CAAC,CAACE,QAAO,IAAKJ,MAAM,CAACI,QAAO,IAAK,CAAC;QAC1D,OAAO;UACL;UACAR,OAAO,CAACS,GAAG,CAACL,MAAM,CAACE,GAAG,EAAE;YACtBI,QAAQ,EAAEN,MAAM,CAACE,GAAG;YACpBK,OAAO,EAAEP,MAAM,CAACO,OAAO;YACvBH,QAAQ,EAAEJ,MAAM,CAACI,QAAO,IAAK;UAC/B,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;;MAEF;MACAR,OAAO,CAACG,OAAO,CAAES,KAAK,IAAKb,YAAY,CAACc,IAAI,CAACD,KAAK,CAAC,CAAC;;MAEpD;MACA,MAAME,KAAI,GAAI;QACZpB,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBoB,KAAK,EAAEhB;MACT,CAAC;;MAED;MACAiB,KAAK,CAAC,8BAA8B,EAAE;QACpCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,KAAK;MAC5B,CAAC,EACEQ,IAAI,CAAC,MAAM;QACV,IAAI,CAAC1B,eAAc,GAAI,4BAA4B;QACnD,IAAI,CAAC2B,KAAK,CAAC,YAAY,CAAC,EAAE;MAC5B,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;QACvC,IAAI,CAAC7B,eAAc,GAAI,4CAA4C;MACrE,CAAC,CAAC;IACN,CAAC;IACD+B,cAAcA,CAACC,IAAI,EAAE;MACnB,IAAI,CAACL,KAAK,CAAC,aAAa,EAAEK,IAAI,CAAC,EAAE;IACnC;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAChB,MAAMC,SAAQ,GAAI,eAAe,CAACC,IAAI,CAAC,IAAI,CAACtC,IAAI,CAAC;MACjD,MAAMuC,UAAS,GAAI,UAAU,CAACD,IAAI,CAAC,IAAI,CAACrC,KAAK,CAAC;MAC9C,OAAOoC,SAAQ,IAAKE,UAAS,IAAK,IAAI,CAAC/B,IAAI,CAACgC,MAAK,GAAI,CAAC;IACxD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}